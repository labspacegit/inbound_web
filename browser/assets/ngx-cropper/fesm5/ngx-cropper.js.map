{"version":3,"file":"ngx-cropper.js.map","sources":["ng://ngx-cropper/lib/cropper.service.ts","ng://ngx-cropper/lib/cropper.model.ts","ng://ngx-cropper/lib/cropper.component.ts","ng://ngx-cropper/lib/cropper.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CropperService {\n\n  constructor(private http: HttpClient) {}\n\n  public save(url: string, pdata: FormData): Observable<any> {\n    return of(this.http.post(url, pdata, {withCredentials: true}));\n  }\n}\n","export class CropperOption {\n  public url: string;\n  public maxsize?: number;\n  public title?: string;\n  public uploadBtnName?: string;\n  public uploadBtnClass?: string;\n  public cancelBtnName?: string;\n  public cancelBtnClass?: string;\n  public applyBtnName?: string;\n  public applyBtnClass?: string;\n  public errorMsgs?: object;\n  public fdName?: string;\n  public aspectRatio?: number;\n  public viewMode?: number; // 0, 1, 2, 3\n}\n","import { Component, OnInit, Input, Output, EventEmitter, ViewChild, AfterViewInit, ViewEncapsulation } from '@angular/core';\nimport Cropper from 'cropperjs';\n\nimport { CropperService } from './cropper.service';\nimport { CropperOption } from './cropper.model';\n\n@Component({\n  selector: 'ngx-cropper',\n  template: `\n  <section class=\"inline-block\">\n    <button class=\"btn btn-primary\" [ngClass]=\"viewConfig.uploadBtnClass\" (click)=\"inputImage.click()\">{{viewConfig.uploadBtnName}}</button>\n    <input #inputImage type=\"file\" class=\"hide\" hidden />\n  </section>\n  <section class=\"crop-container\" *ngIf=\"isShow === true\">\n  <div class=\"crop-box\">\n    <div class=\"crop-box-header\">\n      <h3>{{viewConfig.title}}</h3>\n      <button type=\"button\" class=\"crop-box-close\" (click)=\"onCancel()\">\n        <span></span>\n      </button>\n    </div>\n    <div class=\"crop-box-body\">\n      <figure style=\"height: 300px;\">\n        <img id=\"cropper-image\" class=\"full-width\" />\n      </figure>\n    </div>\n    <div *ngIf=\"error.length > 0\" class=\"crop-box-error\">{{ error }}</div>\n    <div class=\"crop-box-footer\">\n      <button class=\"btn btn-default\" [ngClass]=\"viewConfig.cancelBtnClass\" (click)=\"onCancel()\">{{viewConfig.cancelBtnName}}</button>\n      <button class=\"btn btn-primary\" [disabled]=\"applying\" [ngClass]=\"viewConfig.applyBtnClass\" (click)=\"onApply()\">\n        {{viewConfig.applyBtnName}}\n      </button>\n    </div>\n  </div>\n  </section>\n  `,\n  encapsulation: ViewEncapsulation.None,\n  styleUrls: ['./cropper.component.scss'],\n  providers: [CropperService]\n})\nexport class CropperComponent implements OnInit, AfterViewInit {\n  public error = '';\n  public isShow = false;\n  public applying = false;\n  public viewConfig: CropperOption;\n  @Input() private config: CropperOption;\n  @Output() private returnData: EventEmitter<string> = new EventEmitter<string>();\n  @ViewChild('inputImage') private inputImage: any;\n\n  private fileName: string;\n  private fileType: string;\n  private cropper: Cropper;\n\n  constructor(private ngxCropperService: CropperService) {}\n\n  public ngOnInit() {\n    // init config\n    this.viewConfig = {\n      url: this.config.url || null,\n      maxsize: this.config.maxsize || 512000,\n      title: this.config.title || 'Apply your image size and position',\n      uploadBtnName: this.config.uploadBtnName || 'Upload Image',\n      uploadBtnClass: this.config.uploadBtnClass || null,\n      cancelBtnName: this.config.cancelBtnName || 'Cancel',\n      cancelBtnClass: this.config.cancelBtnClass || null,\n      applyBtnName: this.config.applyBtnName || 'Apply',\n      applyBtnClass: this.config.applyBtnClass || null,\n      errorMsgs: this.config.errorMsgs || {},\n      fdName: this.config.fdName || 'file',\n      aspectRatio: this.config.aspectRatio || 1 / 1,\n      viewMode: this.config.viewMode || 0\n    };\n  }\n\n  public ngAfterViewInit() {\n    //  init upload btn, after dom content loaded init down.\n    setTimeout(() => {\n      this.inputImage.nativeElement.onchange = () => {\n        const files = this.inputImage.nativeElement.files;\n\n        if (files && files.length > 0) {\n          this.isShow = true;\n\n          setTimeout(() => {\n            this.initCropper();\n\n            const file = files[0];\n\n            // Only can upload image format.\n            if (!/^(image\\/*)/.test(file.type)) {\n              this.returnData.emit(\n                JSON.stringify({\n                  code: 4002,\n                  data: null,\n                  msg: `The type you can upload is only image format`\n                })\n              );\n              this.isShow = false;\n              return;\n            }\n\n            const blobURL = URL.createObjectURL(file);\n            this.fileName = file.name;\n            this.fileType = file.type;\n\n            this.cropper.replace(blobURL);\n          });\n        }\n      };\n    }, 0);\n  }\n\n  public onApply() {\n    this.applying = true;\n    const blob = this.dataURItoBlob(this.cropper.getCroppedCanvas().toDataURL(this.fileType));\n\n    if (blob.size > this.viewConfig.maxsize) {\n      const currentSize = Math.ceil(blob.size / 1024);\n      // sent message max then size.\n      this.returnData.emit(\n        JSON.stringify({\n          code: 4000,\n          data: currentSize,\n          msg: `Max size allowed is ${this.viewConfig.maxsize / 1024}kb, current size is ${currentSize}kb`\n        })\n      );\n      this.error =\n        this.viewConfig.errorMsgs['4000'] || `Max size allowed is ${this.viewConfig.maxsize / 1024}kb, Current size is ${currentSize}kb`;\n      this.applying = false;\n      return;\n    }\n\n    const fd = new FormData();\n    const name = this.viewConfig.fdName;\n    fd.append(name, blob, this.fileName);\n\n    const url = this.viewConfig.url;\n    this.ngxCropperService.save(url, fd).subscribe(\n      (data: any) => {\n        // return success\n        this.returnData.emit(\n          JSON.stringify({\n            code: 2000,\n            data,\n            msg: 'The image was sent to the server successfully'\n          })\n        );\n        // hidden modal\n        this.onCancel();\n      },\n      (error: any) => {\n        // return error\n        this.returnData.emit(\n          JSON.stringify({\n            code: 4001,\n            data: null,\n            msg: 'ERROR: When sent to the server, something went wrong, please check the server url.'\n          })\n        );\n        this.error = this.viewConfig.errorMsgs['4001'] || 'When sent to the server, something went wrong';\n        this.applying = false;\n      }\n    );\n  }\n\n  public onCancel() {\n    this.error = '';\n    this.isShow = false;\n    this.applying = false;\n    this.inputImage.nativeElement.value = '';\n  }\n\n  private dataURItoBlob(dataURI: any) {\n    const byteString = window.atob(dataURI.split(',')[1]);\n    const mimeString = dataURI\n      .split(',')[0]\n      .split(':')[1]\n      .split(';')[0];\n\n    const ab = new ArrayBuffer(byteString.length);\n    const ia = new Uint8Array(ab);\n    for (let i = 0; i < byteString.length; i++) {\n      ia[i] = byteString.charCodeAt(i);\n    }\n\n    const bb = new Blob([ab], {\n      type: mimeString\n    });\n    return bb;\n  }\n\n  private initCropper(): void {\n    const cropBox = document.getElementById('cropper-image') as HTMLImageElement;\n    enum DragMode {\n      Crop = 'crop',\n      Move = 'move',\n      None = 'none',\n    }\n\n    const options: Cropper.Options = {\n      aspectRatio: this.viewConfig.aspectRatio,\n      autoCrop: true,\n      viewMode: this.viewConfig.viewMode || 0,\n      dragMode: DragMode.Move,\n      cropBoxMovable: false,\n      cropBoxResizable: false\n    };\n\n    this.cropper = new Cropper(cropBox, options);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { CropperComponent } from './cropper.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n  ],\n  declarations: [CropperComponent],\n  exports: [CropperComponent]\n})\nexport class CropperModule { }\n"],"names":[],"mappings":"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"}
